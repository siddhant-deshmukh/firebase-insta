rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read: if request.auth.token.email_verified;
    }
    match /users/{userId}{
    	allow create,delete : if false;
      allow update : if request.auth.token.email_verified 
          && userId == request.auth.uid 
      		&& get(/databases/$(database)/documents/users/$(request.auth.uid)).data.updatedData< 20;
    }
    match /users/{userId}/following/{followingId}{
    	allow create : if request.auth.token.email_verified 
        && userId == request.auth.uid
      	&& exists(/databases/$(database)/documents/users/$(followingId))
      	&& (request.resource.data.keys().hasOnly(['exists']))
        && request.resource.data.exists == true;
      allow delete : if userId == request.auth.uid;
    }
    match /posts/{postId}{
    	allow create : if request.auth.token.email_verified 
        && request.resource.data.authorId == request.auth.uid 
      	&& get(/databases/$(database)/documents/users/$(request.auth.uid)).data.numPosts < 10
        && (request.resource.data.keys().hasOnly(
        ['createdAt', 'authorId','numLikes', 'numComments', 'desc','numMedia']))
        && request.resource.data.createdAt is timestamp
        && request.resource.data.numLikes == 0
        && request.resource.data.numComments == 0
        && request.resource.data.numMedia < 5
        && request.resource.data.desc.size() < 1000;
      allow delete : if request.auth.token.email_verified 
        && resource.data.authorId == request.auth.uid;
    }
  	match /posts/{postId}/likedby/{userId}{
    	allow create : if request.auth.token.email_verified 
        && request.auth.uid == userId 
        && get(/databases/$(database)/documents/posts/$(postId)).data.numLikes < 50
        && request.resource.data.keys().hasOnly(['createdAt'])
        && request.resource.data.createdAt is timestamp;
      allow delete : if request.auth.token.email_verified 
        && request.auth.uid == userId;
    }
    match /posts/{postId}/comments/{commentId}{
    	allow create : if request.auth.token.email_verified 
        &&  request.resource.data.keys()
        	.hasOnly(['authorId','text','level','parentId','postId','numLikes','numReply','createdAt'])
        && request.auth.uid == request.resource.data.authorId 
      	&& get(/databases/$(database)/documents/posts/$(postId)).data.numComments < 50
        && request.resource.data.numLikes == 0
        && request.resource.data.numReply ==0
        && request.resource.data.postId == postId
        && request.resource.data.text.size() < 500
        && request.resource.data.createdAt is timestamp
        && request.resource.data.parentId == null
        && request.resource.data.level == 0;
      
      allow create : if request.auth.token.email_verified 
        && request.auth.uid == request.resource.data.authorId 
      	&& get(/databases/$(database)/documents/posts/$(postId)).data.numComments < 50
        && request.resource.data.keys()
        	.hasOnly(['authorId','text','level','parentId','postId','numLikes','numReply','createdAt'])
        && request.resource.data.numLikes == 0
        && request.resource.data.numReply ==0
        && request.resource.data.postId == postId
        && request.resource.data.text.size() < 500
        && request.resource.data.createdAt is timestamp
        && request.resource.data.parentId != null
        && request.resource.data.level == 
        get(/databases/$(database)/documents/posts/$(postId)/comments/$(request.resource.data.parent))
        .data.level + 1
        && request.resource.data.level < 4;  
      
        
      allow delete : if request.auth.uid == resource.authorId;
      
      match /commentslikedby/{likedbyUserId}{
      	allow create : if request.auth.token.email_verified 
          && request.auth.uid == likedbyUserId 
          // && get(/databases/$(database)/documents/posts/$(postId)).data.numLikes < 50
          && request.resource.data.keys().hasOnly(['createdAt'])
          && request.resource.data.createdAt is timestamp;
        allow delete : if request.auth.token.email_verified 
          && request.auth.uid == likedbyUserId;
      }
      match /reply/{replyId}{
      	allow create : if request.auth.token.email_verified 
          &&get(/databases/$(database)/documents/posts/$(postId)/comments/$(replyId)).data.authorId == 
          request.auth.uid
          && request.resource.data.keys().hasOnly(['exists'])
          && request.resource.data.exists == true;
        allow delete : if request.auth.token.email_verified 
          && get(/databases/$(database)/documents/posts/$(postId)/comments/$(replyId)).data.authorId == 
          request.auth.uid
          ||  !exists(/databases/$(database)/documents/posts/$(postId)/comments/$(replyId));
      } 
    }
  }
}